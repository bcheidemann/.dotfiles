# Usage:
#  In your .bashrc or .zshrc, source this file as follows:
#
#  ```
#  export DOTFILES_PATH=<local path to .dotfiles repo>
#  source $DOTFILES_PATH
#  ```

################
# Git Commands #
################

## Commit
gcm() {
  git commit -m $@
}

## Commit Empty
gcme() {
  if [ "$#" -eq 0 ]; then
    git commit --allow-empty -m "Empty commit"
    return 1
  fi
  git commit --allow-empty -m $@
}

## Pull
gp() {
  git pull $@
}

## Pull Origin
gpo() {
  git pull origin $@
}

## Push
gpsh() {
  git push $@
}

## Publish
gpbl() {
  git push --set-upstream $1 "$(git rev-parse --abbrev-ref HEAD)" ${@:2}
}

## Publish
gpblo() {
  gpbl origin $@
}

## Checkout
gco() {
  git checkout $@
}

## Checkout New
gcb() {
  git checkout -b $@
}

## Add
ga() {
  git add $@
}

## Add All
gaa() {
  git add . $@
}

## Show file
gs() {
  git show $@
}

## Show file at HEAD
gshead() {
  for ARG in "$@"; do
    git show HEAD:$ARG
  done
}

## Commit hash of file deletion
gshd() {
  # We use a for loop to preserve the order of the arguments. By default, git
  # will sort the output of `git log` by commit date.
  for ARG in "$@"; do
    echo $(git log --all --pretty=format:'%H' --diff-filter=D -- $ARG)
  done
}

## Commit hash of last change to file before deletion
gshlc() {
  local DELETED_HASHES=$(gshd $@)
  while read -r DELETED_HASH; do
    echo $(git log --pretty=format:%H -n 1 $DELETED_HASH^)
  done <<< "$DELETED_HASHES"
}

## Show last contents of deleted file
gslc() {
  local LAST_CHANGED_HASHES=$(gshlc $@)
  local I=1
  while read -r LAST_CHANGED_HASH; do
    git show $LAST_CHANGED_HASH:$@[$I]
    I=$((I+1))
  done <<< "$LAST_CHANGED_HASHES"
}

####################
# Generic Commands #
####################

## Run comman once with each arg string
## e.g.
##  $ wargs "npm run" test "build -- --release"
##
## Is equivalent to:
##  $ npm run test && npm run build -- --release
wargs() {(
  for var in ${@:2}
  do
    $(echo $1 $var)
    exit_status=$?
    if [ ${exit_status} -ne 0 ]; then
      exit "${exit_status}"
    fi
  done
)}

zsrc() {
  source $HOME/.zshrc
}

################
# NPM Commands #
################

## Run npm command
npmr() {
  npm run $@
}

## Run many npm commands
## e.g.
##  $ npmm format lint test "build -- --release"
##
## Is equivalent to:
##  $ npm run format && npm run lint && npm run test && npm run build -- --release
npmm() {(
  wargs "npm run" $@
)}

#######################
# Navigation Commands #
#######################

## List entries in long format
unalias ll &> /dev/null
ll() {
  ls -l $@
}

## List all entries
la() {
  ls -a $@
}

## List all entries in long format
lla() {
  ls -la $@
}

## Change directory and run
cdr() {
  cd $1 && ${@:2}
}

## Change directory and list entries
cdl() {
  cdr $1 ls ${@:2}
}

## Change directory and list entries in long format
cdll() {
  cdr $1 ll ${@:2}
}

## Change directory and list all entries
cdla() {
  cdr $1 la ${@:2}
}

## Change directory and list all entries in long format
cdlla() {
  cdr $1 lla ${@:2}
}

########
# Sync #
########
dotfiles() {
  if [[ $# -eq 0 ]]
  then
    dfusage
  elif [[ $1 == "sync" ]]
  then
    dfsync
  elif [[ $1 == "help" ]]
  then
    dfusage 
  else
    echo "Unrecognised command $1"
    echo ""
    dfusage
  fi
}

dfusage() {
  echo "Usage: dotfiles <command>"
  echo "command:"
  echo "  sync - Pull latest changes to .dotfiles and source .zshrc"
  echo "  help - Display this message"
}

dfsync() {
  echo "Syncing latest changes from .dotfiles..."
  RETURN_DIR=$PWD
  cd $DOTFILES_PATH
  git pull
  cd $RETURN_DIR
  echo "Sourcing $HOME/.zshrc..."
  source $HOME/.zshrc
  echo "Done."
}

########
# Help #
########

help() {
  if [[ $# -eq 0 ]]
  then
    ahelp
    nvhelp
    tmuxhelp
    vscodehelp
  elif [[ $1 == "aliases" ]]
  then
    ahelp
  elif [[ $1 == "nv" ]]
  then
    nvhelp
  elif [[ $1 == "tmux" ]]
  then
    tmuxhelp
  elif [[ $1 == "vscode" ]]
  then
    vscodehelp
  else
    echo "Unrecognised argument $1"
  fi
}

ahelp() {
  echo "Git Commands"
  echo "  gcm    - Commit"
  echo "  gcme   - Commit (allow empty)"
  echo "  gp     - Pull"
  echo "  gpo    - Pull origin"
  echo "  gpsh   - Push"
  echo "  gpbl   - Publish"
  echo "  gpblo  - Publish origin"
  echo "  gco    - Checkout"
  echo "  gcb    - Checkout new"
  echo "  ga     - Add"
  echo "  gaa    - Add all"
  echo "  gs     - Show"
  echo "  gshead - Show HEAD"
  echo "  gshd   - Show commit hash of file deletion"
  echo "  gshlc  - Show commit hash of last change to file before deletion"
  echo "  gslc   - Show last contents of deleted file"
  echo ""
  echo "Generic Commands"
  echo "  wargs - Run command once with each arg string"
  echo "  zsrc  - Source the .zshrc file"
  echo ""
  echo "NPM Commands"
  echo "  npmr  - Run npm command"
  echo "  npmm  - Run many npm commands"
  echo ""
  echo "Navigation Commands"
  echo "  ll    - List entries in long format"
  echo "  la    - List all entries"
  echo "  lla   - List all entries in long format"
  echo "  cdr   - Change directory and run"
  echo "  cdl   - Change directory and list entries"
  echo "  cdll  - Change directory and list entries in long format"
  echo "  cdla  - Change directory and list all entries"
  echo "  cdlla - Change directory and list all entries in long format"
  echo ""
  echo "DOTFILES_PATH=$DOTFILES_PATH"
  echo ""
}

nvhelp() {
  echo "Editor Commands"
  echo "  :map   - View all mapped keys"
  echo "  :nmap  - View all mapped keys (normal mode)"
  echo "  :vmap  - View all mapped keys (visual mode)"
  echo "  :imap  - View all mapped keys (insert mode)"
  echo ""
  echo "LSP Shortcuts"
  echo "  gd          - Definition"
  echo "  gD          - Declaration"
  echo "  K           - Hover"
  echo "  gI          - Implementation"
  echo "  gr          - References"
  echo "  gl          - Open Float"
  echo "  <leader>lf  - Format"
  echo "  <leader>li  - LSP Info"
  echo "  <leader>la  - Code Action"
  echo "  <leader>lj  - Go To Next"
  echo "  <leader>lk  - Go To Previous"
  echo "  <leader>lr  - Rename"
  echo "  <leader>ls  - Signature Help"
  echo "  <leader>lq  - Add buffer diagnostics to the location list"
  echo ""
  echo "Diffview"
  echo "  <leader>dvo - Open Diffview"
  echo "  <leader>dvo - Close Diffview"
  echo ""
  echo "Surround"
  echo "  sd          - Delete surrounds"
  echo "  sc          - Change surrounds"
  echo "  s           - Add surrounds"
  echo "  ss          - Add surrounds for current line"
  echo "  S           - Add surrounds with new lines"
  echo "  SS          - Add surrounds for current line with new lines"
  echo "  <C-s>       - Add surrounds in visual mode"
  echo "  <C-S>       - Add surrounds in visual mode with new lines"
  echo ""
  echo "Navigation"
  echo "  gg          - Go to start of file"
  echo "  G           - Go to end of file"
  echo ""
  echo "Selection"
  echo "  vi\"         - Select text within quotes"
  echo ""
  echo "Misc"
  echo "  <C-\>       - Toggle Terminal"
  echo "  <C-h>       - Focus Treeview"
  echo "  <C-w>w      - Cycle Windows"
  echo "  <leader>R   - Reload File"
  echo "  <S-q>       - Close Buffer"
  echo "  <C-j>       - Previous tap"
  echo "  <C-k>       - Next tap"
  echo ""
  echo "Modes"
  echo "  <esc>       - Normal"
  echo "  i           - Insert"
  echo "  v           - Visual"
  echo "  <C-v>       - Visual Block"
  echo ""
}

tmuxhelp() {
  echo "Tmux Shortcuts"
  echo "  <C-b>%      - Split pane vertically"
  echo "  <C-b>\"      - Split pane horizontally"
  echo "  <C-b>x      - Close pane"
  echo "  <C-b>o      - Cycle panes"
  echo ""
}

vscodehelp() {
  echo "VS Code Shortcuts (Mac)"
  echo "  ⌘ + shift + o    - Navigate outline"
  echo "  ⌘ + \\            - Split pane"
  echo "  ⌘ + shift + {    - Previous tab"
  echo "  ⌘ + shift + }    - Next tab"
  echo ""
}
